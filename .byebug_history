c
CASino::LoginAttempt.all.all
CASino::LoginAttempt.all.count
CASino::LoginAttempt.by_user_id.key(current_user.id).count
CASino::LoginAttempt.by_user_id.key(current_user.id)
c
self.by_active.key(false).count
self.by_active.key(true).count
self.by_active.key(true)
self.by_active
self.by_created_at_and_active.startkey(["", false]).endkey([lifetime.ago, false]).all
self.by_created_at_and_active.startkey(["", false]).endkey([lifetime.ago, false]).count
self.by_created_at_and_active.startkey(["", false]).endkey([lifetime.ago, false])
tfa = self.first
self.first
self.all.count
self.all.all
self.all
c
signed_in?
current_user
CASino::TicketGrantingTicket.by_user_id.key(current_user.id)
c
ticket && ticket.user_id != current_user.id
current_user.id
ticket
tickt
n
params
c
@login_attempts = CASino::LoginAttempt.by_user_id_and_created_at(descending: true).key([current_user.id, ""]).limit(5).all
n
c
current_user
@ticket_granting_tickets
n
c
@two_factor_authenticators
n
c
n
current_user.id
 @two_factor_authenticators 
n
@ticket_granting_tickets
n
current_user.id
current_user
c
authenticator.expired?
c
active
c
authenticator.expired?
authenticator
c
n
validation_result
n
@two_factor_authenticator
n
current_user.id
@two_factor_authenticator
n
c
n
c
n
c
self.all
self.reduce.skip(0).limit(1).rows
self.reduce.skip(0).limit(1).row
self.reduce.skip(0).limit(1)
self.reduce.skip(0)
self.reduce
row
n
self
c
n
proxy_ticket.persisted?
proxy_ticket.dirty?
proxy_ticket.new?
proxy_ticket
n
params
c
proxy_ticket
n
params
c
n
proxy_ticket
n
params
